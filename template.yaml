AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Api client for CloneAI services

Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Tracing: Active
    Runtime: python3.12
    Architectures:
      - x86_64
  Api:
    TracingEnabled: true

Parameters:
  ProjectNamePrefix:
    Type: String
    Default: clone-client
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  # START Layer definition
  Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${ProjectNamePrefix}-layer-${Stage}
      ContentUri: shared_layer
      CompatibleRuntimes:
        - python3.12
  # END Layer definition

  # START API Gateway definition
  CloneClientLambdasAPI:
    Type: AWS::Serverless::Api
    DependsOn: DefaultAPIRole
    Properties:
      Name: !Sub ${ProjectNamePrefix}-AG-${Stage}
      Description: !Sub Clone Client ApiGateway for ${Stage} stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'300'"
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true

  # END API Gateway definition
  HandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectNamePrefix}-func-handler-${Stage}
      Description: Client handler for CloneAI services
      CodeUri: lambdas/default
      Handler: app.lambda_handler
      Role: !GetAtt DefaultLambdaInvokeRole.Arn
      PackageType: Zip 
      Layers:
        - !Ref Layer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref CloneClientLambdasAPI

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectNamePrefix}-func-handler-${Stage}
      Description: Client handler for chat endpoint
      CodeUri: lambdas/chat_lambda
      Handler: app.lambda_handler
      Role: !GetAtt DefaultLambdaInvokeRole.Arn
      PackageType: Zip
      Layers:
        - !Ref Layer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /v1/chat
            Method: post
            RestApiId: !Ref CloneClientLambdasAPI
      Environment:
        Variables:
          # TODO: get searcher service URL
          SEARCHER_URL: "http://127.0.0.1:8000/v1/api/search"


  # START Roles definition
  DefaultLambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Default Lambda Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  DefaultAPIRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Default API gateway role
      RoleName: !Sub ${ProjectNamePrefix}-defaultAPIRole-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'apigateway.amazonaws.com'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  #END Lambda Roles definition

Outputs:
  CloneClientLambdasAPI:
    Description: API Gateway address
    Value: !Sub https://${CloneClientLambdasAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
